;; Alyssaのexptで書くことも正しいが、高速素数テストでは時間がかかるため利用できない
;; 'cause オリジナル版では逐次剰余の計算により、任意に選択された数以下の数での剰余計算を行っており実行時間が短い

(timed-prime-test 1009)
(timed-prime-test 1013)
(timed-prime-test 1019)
(timed-prime-test 10007)
(timed-prime-test 10009)
(timed-prime-test 10037)
(timed-prime-test 100003)
(timed-prime-test 100019)
(timed-prime-test 100043)
(timed-prime-test 1000003)
(timed-prime-test 1000033)
(timed-prime-test 1000037)

(define (expmod base exp m)
  (remainder (fast-expt base exp) m))
(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))
;;(define (expmod base exp m)
;;  (cond ((= exp 0) 1)
;;        ((even? exp)
;;         (remainder (square (expmod base (/ exp 2) m))
;;                  m))
;;        (else
;;       (remainder (* base (expmod base (- exp 1) m))
;;                m))))
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
(define (random n)
  (use srfi-27)
  (random-integer n))
;; gauche用runtime (microsecを返す)
(define (runtime)
   (use srfi-11)
   ;; sys-gettimeofdayの１番目の値がaに、2番目の値がbに格納され、計算結果が戻される
   (let-values (((a b) (sys-gettimeofday)))
               (+ (* a 1000000) b)))
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (fast-prime? n 5)
      (report-prime (- (runtime) start-time))
      (display " is not prime ")))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time)
  (display " msec "))
(define (fast-prime? n times)
  (cond ((= times 0) #t)
	((fermat-test n) (fast-prime? n (- times 1)))
        (else #f)))
(define (square x)
  (* x x))
