(define (cons x y)
  (define (set-x! v) (set! x v))
  (define (set-y! v) (set! y v))
  (define (dispatch m)
    (cond ((eq? m 'car) x)
          ((eq? m 'cdr) y)
          ((eq? m 'set-car!) set-x!)
          ((eq? m 'set-cdr!) set-y!)
          (else (error "Undefined operation -- CONS" m))))
  dispatch)
(define (car z) (z 'car))
(define (cdr z) (z 'cdr))
(define (set-car! z new-value)
  ((z 'set-car!) new-value)
  z)
(define (set-cdr! z new-value)
  ((z 'set-cdr!) new-value)
  z)

(define x (cons 1 2))
;; - global
;;    cons: -> x y, (define (set-x! v) (set! x v))...
;;    car: <-> z, (z 'car)
;;    cdr: <-> z, (z 'cdr)
;;    set-car!: <-> z new-value, (z 'set-car!) new-value)...
;;    set-cdr!: <-> z new-value, (z 'set-cdr!) new-value)...
;;    x: -> m, (cond ((eq? m 'car) x)...
;;    <- E1
;;       x: 1
;;       y: 2
;;       set-x!: <-> v, ...
;;       set-y!: <-> v, ...
;;       dispatch: <-> m,...

(define z (cons x x))
;; - global
;;    cons: -> x y, (define (set-x! v) (set! x v))...
;;    car: <-> z, (z 'car)
;;    cdr: <-> z, (z 'cdr)
;;    set-car!: <-> z new-value, (z 'set-car!) new-value)...
;;    set-cdr!: <-> z new-value, (z 'set-cdr!) new-value)...
;;    x: -> m, (cond ((eq? m 'car) x)...
;;    z: -> m, (cond ((eq? m 'car) x)...
;;    <- E1
;;       x: 1
;;       y: 2
;;       set-x!: <-> v, ...
;;       set-y!: <-> v, ...
;;       dispatch: <-> m,...
;;    <- E2
;;       x: <-> m, (cond ((eq? m 'car) x)...
;;       y: <-> m, (cond ((eq? m 'car) x)...
;;       set-x!: <-> v, ...
;;       set-y!: <-> v, ...
;;       dispatch: <-> m,...

(set-car! (cdr z) 17)
;; - global
;;    cons: -> x y, (define (set-x! v) (set! x v))...
;;    car: <-> z, (z 'car)
;;    cdr: <-> z, (z 'cdr)
;;    set-car!: <-> z new-value, (z 'set-car!) new-value)...
;;    set-cdr!: <-> z new-value, (z 'set-cdr!) new-value)...
;;    x: -> m, (cond ((eq? m 'car) x)...
;;    z: -> m, (cond ((eq? m 'car) x)...
;;    <- E1
;;       x: 1
;;       y: 2
;;       set-x!: <-> v, ...
;;       set-y!: <-> v, ...
;;       dispatch: <-> m,...
;;    <- E2
;;       x: <-> m, (cond ((eq? m 'car) x)...
;;       y: <-> m, (cond ((eq? m 'car) x)...
;;       set-x!: <-> v, ...
;;       set-y!: <-> v, ...
;;       dispatch: <-> m,...
;;    <- E3
;;       z: <-> m, (cond ((eq? m 'car) x)...
;;    <- E4
;;       new-value: 17

(car x)
17
;; - global
;;    cons: -> x y, (define (set-x! v) (set! x v))...
;;    car: <-> z, (z 'car)
;;    cdr: <-> z, (z 'cdr)
;;    set-car!: <-> z new-value, (z 'set-car!) new-value)...
;;    set-cdr!: <-> z new-value, (z 'set-cdr!) new-value)...
;;    x: -> m, (cond ((eq? m 'car) x)...
;;    z: -> m, (cond ((eq? m 'car) x)...
;;    <- E1
;;       x: 1
;;       y: 2
;;       set-x!: <-> v, ...
;;       set-y!: <-> v, ...
;;       dispatch: <-> m,...
;;    <- E2
;;       x: <-> m, (cond ((eq? m 'car) x)...
;;       y: <-> m, (cond ((eq? m 'car) x)...
;;       set-x!: <-> v, ...
;;       set-y!: <-> v, ...
;;       dispatch: <-> m,...
;;    <- E3
;;       z: <-> (define (set-x! v) (set! x v))...
;;    <- E4
;;       new-value: 17
;;    <- E5
;;       x: <-> m, (cond ((eq? m 'car) x)...

;; 3.11
(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request -- MAKE-ACCOUNT"
                       m))))
  dispatch)

(define acc (make-account 50))
;; - global
;;    make-account: <-> balance, (define (withdraw amount) ...
;;    acc: -> m, (cond ((eq? m 'withdraw) withdraw)
;;    <- E1
;;       balance: 50
;;       withdraw: <-> amount,...
;;       deposit: <-> amount,...
;;       dispatch: <-> m, (cond ((eq? m 'withdraw) withdraw)

((acc 'deposit) 40)
90
;; - global
;;    make-account: <-> balance, (define (withdraw amount) ...
;;    acc: -> m, (cond ((eq? m 'withdraw) withdraw)
;;    <- E1
;;        balance: 90
;;        withdraw: <-> amount,...
;;        deposit: <-> amount,...
;;        dispatch: <-> m, (cond ((eq? m 'withdraw) withdraw)
;;        <- E2
;;            m: 'deposit
;;        <- E3
;;            amount: 40

((acc 'withdraw) 60)
30
;; - global
;;    make-account: <-> balance, (define (withdraw amount) ...
;;    acc: -> dispatch
;;    <- E1
;;        balance: 30
;;        withdraw: <-> amount,...
;;        deposit: <-> amount,...
;;        dispatch: <-> m, (cond ((eq? m 'withdraw) withdraw)
;;        <- E4
;;            m: 'withdraw
;;        <- E5
;;            amount: 60

(define acc2 (make-account 100))
;; - global
;;    make-account: <-> balance, (define (withdraw amount) ...
;;    acc: -> dispatch
;;    acc2: -> dispatch
;;    <- E1
;;        balance: 30
;;        withdraw: <-> amount,...
;;        deposit: <-> amount,...
;;        dispatch: <-> m, (cond ((eq? m 'withdraw) withdraw)
;;    <- E6
;;        balance: 100
;;        withdraw: <-> amount,...
;;        deposit: <-> amount,...
;;        dispatch: <-> m, (cond ((eq? m 'withdraw) withdraw)

