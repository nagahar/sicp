(define (ripple-cary-adder a b sum c-out)
  (let ((c-in (make-wire)))
	(if (null? ai)
	  (set-signal! c-in 0)
	  (begin
		(ripple-cary-adder (cdr ai) (cdr bi) (cdr s) c-out)
		(full-adder (car ai) (car bi) c-in (car s) c-out)
		(set-signal! c-in c-out)))))

;; half-adder = 1*and + 1*inv + 1*or
;; full-adder = 3*or + 1*and + 1*inv
;; 遅延は n*full-adder = n*(3*or + 1*and + 1*inv)

(define (full-adder a b c-in sum c-out)
  (let ((s (make-wire))
		(c1 (make-wire))
		(c2 (make-wire)))
	(half-adder b c-in s c1)
	(half-adder a s sum c2)
	(or-gate c1 c2 c-out)
	'ok))
(define (half-adder a b s c)
  (let ((d (make-wire)) (e (make-wire)))
	(or-gate a b d)
	(and-gate a b c)
	(inverter c e)
	(and-gate d e s)
	'ok))
(define (inverter input output)
  (define (invert-input)
	(let ((new-value (logical-not (get-signal input))))
	  (after-delay inverter-delay
				   (lambda ()
					 (set-signal! output new-value)))))
  (add-action! input invert-input)
  'ok)
(define (logical-not s)
  (cond ((= s 0) 1)
	((= s 1) 0)
	(else (error "Invalid signal" s))))
(define (and-gate a1 a2 output)
  (define (and-action-procedure)
	(let ((new-value
			(logical-and (get-signal a1) (get-signal a2))))
	  (after-delay and-gate-delay
				   (lambda ()
					 (set-signal! output new-value)))))
  (add-action! a1 and-action-procedure)
  (add-action! a2 and-action-procedure)
  'ok)
(define (or-gate a1 a2 output)
  (let ((a1out (make-wire))
		(a2out (make-wire))
		(andout (make-wire)))
	(inverter a1 a1out)
	(inverter a2 a2out)
	(and-gate a1out a2out andout)
	(inverter andout output)))

