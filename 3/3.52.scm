(load "../stream.scm")
(define sum 0)
(define (accum x)
  (set! sum (+ x sum))
  sum)
(define seq (stream-map accum (stream-enumerate-interval 1 20)))
;; sum = 1, x = 1
(define y (stream-filter even? seq))
;; sum = 3, x = 2, seq = (1 3 ...)
;; sum = 6, x = 3, seq = (1 3 6 ...), y = (6 ...)
(define z (stream-filter (lambda (x) (= (remainder x 5) 0))
						 seq))
;; sum = 10, x = 4, seq = (1 3 6 10 ...), z = (10 ...)
(stream-ref y 7)
;; sum = 15, x = 5, seq = (1 3 6 10 15 ...), y = (6 ...)
;; sum = 21, x = 6, seq = (1 3 6 10 15 21 ...), y = (6 ...)
;; sum = 28, x = 7, seq = (1 3 6 10 15 21 28 ...), y = (6 28 ...)
;; sum = 36, x = 8, seq = (1 3 6 10 15 21 28 36 ...), y = (6 28 36 ...)
;; sum = 45, x = 9, seq = (1 3 6 10 15 21 28 36 45 ...), y = (6 28 36 ...)
;; sum = 55, x = 10, seq = (1 3 6 10 15 21 28 36 45 55 ...), y = (6 28 36 ...)
;; sum = 66, x = 11, seq = (1 3 6 10 15 21 28 36 45 55 66 ...), y = (6 28 36 66 ...)
;; sum = 78, x = 12, seq = (1 3 6 10 15 21 28 36 45 55 66 78 ...), y = (6 28 36 66 78 ...)
;; sum = 91, x = 13, seq = (1 3 6 10 15 21 28 36 45 55 66 78 91 ...), y = (6 28 36 66 78 ...)
;; sum = 105, x = 14, seq = (1 3 6 10 15 21 28 36 45 55 66 78 91 105 ...), y = (6 28 36 66 78 105 ...)
;; sum = 120, x = 15, seq = (1 3 6 10 15 21 28 36 45 55 66 78 91 105 120 ...), y = (6 28 36 66 78 110 120 ...)
;; sum = 136, x = 16, seq = (1 3 6 10 15 21 28 36 45 55 66 78 91 105 120 136 ...), y = (6 28 36 66 78 110 120 136 ...)
(display-stream z)
;; sum = 136, x = 16, seq = (1 3 6 10 15 21 28 36 45 55 66 78 91 105 120 136 ...),  z = (10 15 45 55 105 120 ...)
;; sum = 153, x = 17, seq = (1 3 6 10 15 21 28 36 45 55 66 78 91 105 120 136 153 ...),  z = (10 15 45 55 105 120 ...)
;; sum = 171, x = 18, seq = (1 3 6 10 15 21 28 36 45 55 66 78 91 105 120 136 153 171 ...),  z = (10 15 45 55 105 120 ...)
;; sum = 190, x = 19, seq = (1 3 6 10 15 21 28 36 45 55 66 78 91 105 120 136 153 171 190 ...),  z = (10 15 45 55 105 120 190 ...)
;; sum = 210, x = 20, seq = (1 3 6 10 15 21 28 36 45 55 66 78 91 105 120 136 153 171 190 210 ...),  z = (10 15 45 55 105 120 190 210 ...)
(display sum)
;; 210

;; memo-proc の最適化が無い場合 それぞれ下記でseqが再計算されるためsum は362になる
;;(define z (stream-filter (lambda (x) (= (remainder x 5) 0))
;;						 seq))
;; sum = 8, x = 2, seq = (1 8 ...), z = ()
;; sum = 11, x = 3, seq = (1 8 ...), z = ()
;; sum = 15, x = 4, seq = (1 8 ...), z = (15 ..)
;;(stream-ref y 7)
;; sum = 19, x = 4, seq = (1 3 6 12 ...), y = (6 ...)
;; sum = 24, x = 5, seq = (1 3 6 12 ...), y = (6 24 ...)
;; sum = 30, x = 6, seq = (1 3 6 12 ...), y = (6 24 30 ...)
;; sum = 37, x = 7, seq = (1 3 6 12 ...), y = (6 24 30 ...)
;; sum = 45, x = 8, seq = (1 3 6 12 ...), y = (6 24 30 ...)
;; sum = 54, x = 9, seq = (1 3 6 12 ...), y = (6 24 30 ...)
;; sum = 64, x = 10, seq = (1 3 6 12 ...), y = (6 24 30 64 ...)
;; sum = 75, x = 11, seq = (1 3 6 12 ...), y = (6 24 30 64 ...)
;; sum = 87, x = 12, seq = (1 3 6 12 ...), y = (6 24 30 64 ...)
;; sum = 100, x = 13, seq = (1 3 6 12 ...), y = (6 24 30 64 100 ...)
;; sum = 114, x = 14, seq = (1 3 6 12 ...), y = (6 24 30 64 100 114 ...)
;; sum = 129, x = 15, seq = (1 3 6 12 ...), y = (6 24 30 64 100 114 ...)
;; sum = 145, x = 16, seq = (1 3 6 12 ...), y = (6 24 30 64 100 114 ...)
;; sum = 162, x = 17, seq = (1 3 6 12 ...), y = (6 24 30 64 100 114 162 ...)
;;(display-stream z)
;; sum = 167, x = 5, seq = (1 3 6 10 167 ...),  z = (10 ...)
;; ... (162 + ((5+20)*16/2))
;; sum = 362
;;(display sum)
;; 362
