(load "../simulator.scm")

(use srfi-1)
(define (make-register name)
  (let ((contents '*unassigned*)
	(trace-mode #f))
    (define (trace-on)
      (set! trace-mode #t))
    (define (trace-off)
      (set! trace-mode #f))
    (define (dispatch message)
      (cond ((eq? message 'get) contents)
	((eq? message 'set) (lambda (value)
			      (cond (trace-mode
				      (format #t "register ~a: ~a => ~a" name contents value)
				      (newline)))
			      (set! contents value)))
	((eq? message 'trace-on) (trace-on))
	((eq? message 'trace-off) (trace-off))
	(else
	  (error "Unknown request -- REGISTER" message))))
    dispatch))

(define (make-new-machine)
  (let ((pc (make-register 'pc))
	(flag (make-register 'flag))
	(stack (make-stack))
	(the-instruction-sequence '())
	(number-inst 0)
	(trace-mode #f)
	(current-label '())
	(breakpoints '())
	(currentpoints '())
	(label-distance 0))
    (let ((the-ops
	    (list
	      (list 'initialize-stack
		    (lambda () (stack 'initialize)))
	      (list 'print-stack-statistics
		    (lambda () (stack 'print-statistics)))))
	  (register-table
	    (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
	(if (assoc name register-table)
	  (error "Multiply defined register: " name)
	  (set! register-table
	    (cons (list name (make-register name))
		  register-table)))
	'register-allocated)
      (define (lookup-register name)
	(let ((val (assoc name register-table)))
	  (if val
	    (cadr val)
	    (error "Unknown register:" name))))
      (define (execute)
	(let ((insts (get-contents pc)))
	  (cond ((null? insts)
		 'done)
	    (else
	      (cond ((equal? (caaar insts) 'label)
		     (set! current-label (cadaar insts))
		     (set! number-inst (- number-inst 1))
		     (let ((points (filter
				     (lambda (p) (equal? current-label (car p)))
				     breakpoints)))
		       (set! currentpoints (sort points (lambda (x y) (< (cadr x) (cadr y)))))
		       (set! label-distance 0))))
	      (cond (trace-mode
		      (format #t "label: ~a" current-label)
		      (newline)
		      (format #t "instruction: ~a" (caar insts))
		      (newline)))
	      (cond ((and (not (null? currentpoints)) (= (cadar currentpoints) label-distance))
		     (format #t "break: label ~a + ~d"
			     current-label label-distance)
		     (newline)
		     (print "******* BREAK *******")
		     'mybreak)
		(else
		  ((instruction-execution-proc (car insts)))
		  (set! number-inst (+ 1 number-inst))
		  (set! label-distance (+ 1 label-distance))
		  (execute)))))))
      (define (reset-currentpoints)
	(set! currentpoints (cdr currentpoints)))
      (define (reset-count)
	(set! number-inst 0))
      (define (reset-label)
	(set! current-label '()))
      (define (trace-on)
	(set! trace-mode #t)
	(for-each
	  (lambda (register)
	    (if (not (or (equal? (car register) 'pc)
		       (equal? (car register) 'flag)))
	      ((cadr register) 'trace-on)))
	  register-table))
      (define (trace-off)
	(set! trace-mode #f))
      (define (set-breakpoint label n)
	(set! breakpoints (cons (list label n) breakpoints)))
      (define (cancel-breakpoint label n)
	(set! breakpoints (delete (list label n) breakpoints)))
      (define (cancel-all-breakpoint)
	(set! breakpoints '()))
      (define (dispatch message)
	(cond ((eq? message 'start)
	       (stack 'reset-statistics)
	       (reset-count)
	       (reset-label)
	       (set-contents! pc the-instruction-sequence)
	       (execute))
	  ((eq? message 'install-instruction-sequence)
	   (lambda (seq) (set! the-instruction-sequence seq)))
	  ((eq? message 'allocate-register) allocate-register)
	  ((eq? message 'get-register) lookup-register)
	  ((eq? message 'install-operations)
	   (lambda (ops) (set! the-ops (append the-ops ops))))
	  ((eq? message 'stack) stack)
	  ((eq? message 'operations) the-ops)
	  ((eq? message 'reset-count) (reset-count))
	  ((eq? message 'get-count) number-inst)
	  ((eq? message 'trace-on) (trace-on))
	  ((eq? message 'trace-off) (trace-off))
	  ((eq? message 'set-breakpoint) set-breakpoint)
	  ((eq? message 'proceed) (reset-currentpoints) (execute))
	  ((eq? message 'cancel-breakpoint) cancel-breakpoint)
	  ((eq? message 'cancel-all-breakpoint) (cancel-all-breakpoint))
	  (else (error "Unknown request -- MACHINE" message))))
      dispatch)))

(define (extract-labels text receive)
  (if (null? text)
    (receive '() '())
    (extract-labels (cdr text)
		    (lambda (insts labels)
		      (let ((next-inst (car text)))
			(if (symbol? next-inst)
			  (let ((inst-label (cons (make-instruction
						    (list 'label next-inst))
						  insts)))
			    (receive inst-label
			      (cons (make-label-entry next-inst
						      inst-label)
				    labels)))
			  (receive (cons (make-instruction next-inst)
					 insts)
			    labels)))))))

(define (make-execution-procedure inst labels machine
				  pc flag stack ops)
  (cond ((eq? (car inst) 'assign)
	 (make-assign inst machine labels ops pc))
    ((eq? (car inst) 'test)
     (make-test inst machine labels ops flag pc))
    ((eq? (car inst) 'branch)
     (make-branch inst machine labels flag pc))
    ((eq? (car inst) 'goto)
     (make-goto inst machine labels pc))
    ((eq? (car inst) 'save)
     (make-save inst machine stack pc))
    ((eq? (car inst) 'restore)
     (make-restore inst machine stack pc))
    ((eq? (car inst) 'perform)
     (make-perform inst machine labels ops pc))
    ((eq? (car inst) 'label)
     (make-label-inst pc))
    (else (error "Unknown instruction type -- ASSEMBLE"
		 inst))))

(define (make-label-inst pc)
  (lambda ()
    (advance-pc pc)))

(define (set-breakpoint machine label n)
  ((machine 'set-breakpoint) label n)
  'done)

(define (proceed-machine machine)
  (machine 'proceed))

(define (cancel-breakpoint machine label n)
  ((machine 'cancel-breakpoint) label n)
  'done)

(define (cancel-all-breakpoint machine)
  (machine 'cancel-all-breakpoint)
  'done)

(define fact-machine
  (make-machine
    '(n continue val)
    (list (list '= =) (list '- -) (list '* *))
    '((assign continue (label fact-done))
      fact-loop
      (test (op =) (reg n) (const 1))
      (branch (label base-case))
      (save continue)
      (save n)
      (assign n (op -) (reg n) (const 1))
      (assign continue (label after-fact))
      (goto (label fact-loop))
      after-fact
      (restore n)
      (restore continue)
      (assign val (op *) (reg n) (reg val))
      (goto (reg continue))
      base-case
      (assign val (const 1))
      (goto (reg continue))
      fact-done)))

(define (factorial n)
  (set-register-contents! fact-machine 'n n)
  (fact-machine 'trace-on)
  (start fact-machine))

(set-breakpoint fact-machine 'after-fact 1)
(set-breakpoint fact-machine 'base-case 1)
(set-breakpoint fact-machine 'after-fact 3)
(factorial 2)
;(cancel-all-breakpoint fact-machine)
;(cancel-breakpoint fact-machine 'after-fact 1)
;(proceed-machine fact-machine)

