;;(let <var> <bindings> <body>)
;;(let <var> ((var1 exp1) ... (varn expn)) <body>)
;;(begin (define (<var> <var1> ... <varn>) <body>)
;;  (<var> <exp1> ... <expn>))

(load "../metacircular.scm")
(define (let? exp) (tagged-list? exp 'let))
(define (let-var clauses) (map car (car clauses)))
(define (let-exp clauses) (map cadr (car clauses)))
(define (let-rest clauses) (cdr clauses))
(define (let-body clauses) (cdr clauses))
(define (let-clause exp) (cdr exp))
(define (make-define parameters body)
  (cons 'define (cons parameters body)))
(define (let->combination exp)
  (expand-let-clauses (let-clause exp)))
(define (expand-let-clauses clauses)
  (if (null? (car clauses))
    '()
    (if (= (length clauses) 2)
      (append (list (make-lambda (let-var clauses) (let-body clauses))) (let-exp clauses))
      (let ((body (let-body (let-rest clauses)))
	    (var (car clauses))
	    (binding-exps (let-exp (let-rest clauses)))
	    (binding-vars (let-var (let-rest clauses))))
	(make-begin
	  (list (make-define (cons var binding-vars) body)
		(cons var binding-exps)))))))

(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
    ((variable? exp) (lookup-variable-value exp env))
    ((quoted? exp) (text-of-quotation exp))
    ((assignment? exp) (eval-assignment exp env))
    ((definition? exp) (eval-definition exp env))
    ((if? exp) (eval-if exp env))
    ((lambda? exp)
     (make-procedure (lambda-parameters exp)
		     (lambda-body exp)
		     env))
    ((begin? exp)
     (eval-sequence (begin-actions exp) env))
    ((cond? exp) (eval (cond->if exp) env))
    ((let? exp) (eval (let->combination exp) env))
    ((application? exp)
     (apply (eval (operator exp) env)
	    (list-of-values (operands exp) env)))
    (else
      (error "Unknown expression type -- EVAL" exp))))
(define (fib n)
  (let fib-iter ((a 1)
		 (b 0)
		 (count n))
    (if (= count 0)
      b
      (fib-iter (+ a b) a (- count 1)))))

(driver-loop)
