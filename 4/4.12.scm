(define (scan-frame var frame proc)
  (let ((vars (frame-variables frame))
	(vals (frame-values frame)))
    (define (scan vars vals)
      (cond ((null? vars)
	     '()
	     ((eq? var (car vars))
	      (proc vals))
	     (else (scan (cdr vars) (cdr vals))))))
    (scan vars vals)))

(define (lookup-variable-value var env)
  (define (env-loop env)
    (if (eq? env the-empty-environment)
      (error "Unbound variable" var)
      (let ((frame (first-frame env)))
	(if (null? (scan-frame var frame (lambda (x) (car x))))
	  (env-loop (enclosing-environment env)))))))

(define (set-variable-value! var val env)
  (define (env-loop env)
    (if (eq? env the-empty-environment)
      (error "Unbound variable -- SET!" var)
      (let ((frame (first-frame env)))
	(if (null? (scan-frame var frame (lambda (x) (set-car! x val))))
	  (env-loop (enclosing-environment env)))))))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (if (null? (scan-frame var frame (lambda (x) (set-car! x val))))
      (add-binding-to-frame! var val frame))))

