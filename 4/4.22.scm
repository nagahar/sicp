(load "../metacircular2.scm")
(define (let? exp) (tagged-list? exp 'let))
(define (let-var clauses) (map car (car clauses)))
(define (let-exp clauses) (map cadr (car clauses)))
(define (let-body clauses) (cdr clauses))
(define (let-clause exp) (cdr exp))
(define (let->combination exp)
  (expand-let-clauses (let-clause exp)))
(define (expand-let-clauses clauses)
  (if (null? (car clauses))
	'()
	(append (list (make-lambda (let-var clauses) (let-body clauses))) (let-exp clauses))))
(define (analyze exp)
  (cond ((self-evaluating? exp)
	 (analyze-self-evaluating exp))
    ((quoted? exp) (analyze-quoted exp))
    ((variable? exp) (analyze-variable exp))
    ((assignment? exp) (analyze-assignment exp))
    ((definition? exp) (analyze-definition exp))
    ((if? exp) (analyze-if exp))
    ((lambda? exp) (analyze-lambda exp))
    ((begin? exp) (analyze-sequence (begin-actions exp)))
    ((cond? exp) (analyze (cond->if exp)))
    ((let? exp) (analyze (let->combination exp)))
    ((application? exp) (analyze-application exp))
    (else
      (error "Unknown expression type -- ANALYZE" exp))))

(let ((a 3)) (display a))
;3
(driver-loop)
