!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
*unparsed*	4.45.scm	/^(define *unparsed* '())$/;"	d
*unparsed*	4.48.scm	/^(define *unparsed* '())$/;"	d
*unparsed*	4.49.scm	/^(define *unparsed* '())$/;"	d
*unparsed*	4.50.scm	/^(define *unparsed* '())$/;"	d
a	4.16.scm	/^(define a$/;"	d
a	4.17.scm	/^(define a$/;"	d
a-pythagorean-triple-between	4.35.scm	/^(define (a-pythagorean-triple-between low high)$/;"	d
a-pythagorean-triple-between	4.36.scm	/^(define (a-pythagorean-triple-between n)$/;"	d
a-pythagorean-triple-between	4.37.scm	/^(define (a-pythagorean-triple-between low high)$/;"	d
add-assertion!	4.70.scm	/^(define (add-assertion! assertion)$/;"	d
add-binding-to-frame!	4.11.scm	/^(define (add-binding-to-frame! var val frame)$/;"	d
adjectives	4.48.scm	/^(define adjectives '(adjective tall little large small))$/;"	d
adverbs	4.48.scm	/^(define adverbs '(adverb brilliantly daily soon))$/;"	d
an-element-of	4.51.scm	/^(define (an-element-of items)$/;"	d
an-element-of	4.52.scm	/^(define (an-element-of items)$/;"	d
an-element-of	4.53.scm	/^(define (an-element-of items)$/;"	d
an-integer-between	4.35.scm	/^(define (an-integer-between low high)$/;"	d
an-integer-between	4.36.scm	/^(define (an-integer-between low high)$/;"	d
an-integer-between	4.37.scm	/^(define (an-integer-between low high)$/;"	d
an-integer-starting-from	4.36.scm	/^(define (an-integer-starting-from n)$/;"	d
analyze	4.22.scm	/^(define (analyze exp)$/;"	d
analyze	4.26.scm	/^(define (analyze exp)$/;"	d
analyze	4.50.scm	/^(define (analyze exp)$/;"	d
analyze	4.51.scm	/^(define (analyze exp)$/;"	d
analyze	4.52.scm	/^(define (analyze exp)$/;"	d
analyze	4.53.scm	/^(define (analyze exp)$/;"	d
analyze	4.54.scm	/^(define (analyze exp)$/;"	d
analyze-if-fail	4.52.scm	/^(define (analyze-if-fail exp)$/;"	d
analyze-if-fail	4.53.scm	/^(define (analyze-if-fail exp)$/;"	d
analyze-permanent-assignment	4.51.scm	/^(define (analyze-permanent-assignment exp)$/;"	d
analyze-permanent-assignment	4.53.scm	/^(define (analyze-permanent-assignment exp)$/;"	d
analyze-ramb	4.50.scm	/^(define (analyze-ramb exp)$/;"	d
analyze-require	4.54.scm	/^(define (analyze-require exp)$/;"	d
analyze-sequence	4.23.scm	/^(define (analyze-sequence exps)$/;"	d
and-clauses	4.4.scm	/^(define (and-clauses exp) (cdr exp))$/;"	d
and?	4.4.scm	/^(define (and? exp) (tagged-list? exp 'and))$/;"	d
application?	4.2.scm	/^(define (application? exp) (tagged-list? exp 'call))$/;"	d
apply	4.31.scm	/^(define (apply procedure arguments env)$/;"	d
articles	4.45.scm	/^(define articles '(article the a))$/;"	d
articles	4.48.scm	/^(define articles '(article the a))$/;"	d
articles	4.49.scm	/^(define articles '(article the a))$/;"	d
articles	4.50.scm	/^(define articles '(article the a))$/;"	d
assignment-value	4.3.scm	/^  (define (assignment-value exp) (caddr exp))$/;"	d
assignment-variable	4.3.scm	/^  (define (assignment-variable exp) (cadr exp))$/;"	d
b	4.17.scm	/^(define b$/;"	d
begin-actions	4.3.scm	/^  (define (begin-actions exp) (cdr exp))$/;"	d
car	4.32.scm	/^(define (car z)$/;"	d
car	4.33.scm	/^(define (car z)$/;"	d
cdr	4.32.scm	/^(define (cdr z)$/;"	d
cdr	4.33.scm	/^(define (cdr z)$/;"	d
check-frames	4.76.scm	/^(define (check-frames frame1 frame2)$/;"	d
cond->if	4.3.scm	/^  (define (cond->if exp)$/;"	d
cond-actions	4.3.scm	/^  (define (cond-actions clause) (cdr clause))$/;"	d
cond-clauses	4.3.scm	/^  (define (cond-clauses exp) (cdr exp))$/;"	d
cond-else-clause?	4.3.scm	/^  (define (cond-else-clause? clause)$/;"	d
cond-predicate	4.3.scm	/^  (define (cond-predicate clause) (car clause))$/;"	d
conjoin	4.76.scm	/^(define (conjoin conjuncts frame-stream)$/;"	d
conjunctions	4.48.scm	/^(define conjunctions '(conjunction and but))$/;"	d
cons	4.32.scm	/^(define (cons x y)$/;"	d
cons	4.33.scm	/^(define (cons x y)$/;"	d
count	4.27.scm	/^(define count 0)$/;"	d
count	4.29.scm	/^(define count 0)$/;"	d
count	4.51.scm	/^(define count 0)$/;"	d
define-variable!	4.12.scm	/^(define (define-variable! var val env)$/;"	d
definition-value	4.10.scm	/^(define (definition-value exp)$/;"	d
definition-value	4.3.scm	/^  (define (definition-value exp)$/;"	d
definition-variable	4.10.scm	/^(define (definition-variable exp)$/;"	d
definition-variable	4.3.scm	/^	(define-variable! (definition-variable exp)$/;"	d
definition-variable	4.3.scm	/^  (define (definition-variable exp)$/;"	d
delay-memo-it	4.31.scm	/^(define (delay-memo-it exp env)$/;"	d
deriv	4.3.scm	/^(define (deriv exp var)$/;"	d
disjoin	4.71.scm	/^(define (disjoin disjuncts frame-stream)$/;"	d
disjoin	4.72.scm	/^(define (disjoin disjuncts frame-stream)$/;"	d
distinct?	4.38.scm	/^(define (distinct? items)$/;"	d
distinct?	4.39.scm	/^(define (distinct? items)$/;"	d
distinct?	4.40.scm	/^(define (distinct? items)$/;"	d
distinct?	4.41.scm	/^(define (distinct? items)$/;"	d
distinct?	4.42.scm	/^(define (distinct? items)$/;"	d
distinct?	4.43.scm	/^(define (distinct? items)$/;"	d
distinct?	4.44.scm	/^(define (distinct? items)$/;"	d
do-while-body	4.9.scm	/^(define (do-while-body exp) (cadr exp))$/;"	d
do-while-predicate	4.9.scm	/^(define (do-while-predicate exp) (caddr exp))$/;"	d
do-while?	4.9.scm	/^(define (do-while? exp) (tagged-list? exp 'do-while))$/;"	d
driver-loop	4.24.scm	/^(define (driver-loop)$/;"	d
dy	4.18.scm	/^  (define dy (stream-map f y))$/;"	d
env-loop	4.12.scm	/^  (define (env-loop env)$/;"	d
env-loop	4.16.scm	/^  (define (env-loop env)$/;"	d
eval	4.13.scm	/^(define (eval exp env)$/;"	d
eval	4.2.scm	/^(define (eval exp env)$/;"	d
eval	4.20.scm	/^(define (eval exp env)$/;"	d
eval	4.3.scm	/^(define (eval exp env)$/;"	d
eval	4.33.scm	/^(define (eval exp env)$/;"	d
eval	4.4.scm	/^(define (eval exp env)$/;"	d
eval	4.6.scm	/^(define (eval exp env)$/;"	d
eval	4.7.scm	/^(define (eval exp env)$/;"	d
eval	4.8.scm	/^(define (eval exp env)$/;"	d
eval	4.9.scm	/^(define (eval exp env)$/;"	d
eval-and	4.4.scm	/^(define (eval-and exp env)$/;"	d
eval-assignment	4.3.scm	/^  (define (eval-assignment exp env)$/;"	d
eval-definition	4.3.scm	/^  (define (eval-definition exp env)$/;"	d
eval-if	4.3.scm	/^  (define (eval-if exp env)$/;"	d
eval-or	4.4.scm	/^(define (eval-or exp env)$/;"	d
eval-sequence	4.30.scm	/^(define (eval-sequence exps env)$/;"	d
eval-unbinding	4.13.scm	/^(define (eval-unbinding exp env)$/;"	d
even?	4.21.scm	/^  (define (even? n)$/;"	d
execute-sequence	4.23.scm	/^  (define (execute-sequence procs env)$/;"	d
expand-clauses	4.3.scm	/^  (define (expand-clauses clauses)$/;"	d
expand-clauses	4.5.scm	/^(define (expand-clauses clauses)$/;"	d
expand-do-while	4.9.scm	/^(define (expand-do-while exp)$/;"	d
expand-for	4.9.scm	/^(define (expand-for exp)$/;"	d
expand-let*-clauses	4.7.scm	/^(define (expand-let*-clauses clauses)$/;"	d
expand-let-clauses	4.22.scm	/^(define (expand-let-clauses clauses)$/;"	d
expand-let-clauses	4.6.scm	/^(define (expand-let-clauses clauses)$/;"	d
expand-let-clauses	4.7.scm	/^(define (expand-let-clauses clauses)$/;"	d
expand-let-clauses	4.8.scm	/^(define (expand-let-clauses clauses)$/;"	d
expand-parameters	4.31.scm	/^(define (expand-parameters params)$/;"	d
expand-until	4.9.scm	/^(define (expand-until exp)$/;"	d
expand-while	4.9.scm	/^(define (expand-while exp)$/;"	d
f	4.20.scm	/^(define (f x)$/;"	d
f	4.21.scm	/^(define (f x)$/;"	d
factorial	4.25.scm	/^(define (factorial n)$/;"	d
factorial	4.26.scm	/^(define (factorial n)$/;"	d
father	4.43.scm	/^(define (father)$/;"	d
fib	4.24.scm	/^(define (fib n)$/;"	d
fib	4.29.scm	/^(define (fib n)$/;"	d
fib	4.8.scm	/^(define (fib n)$/;"	d
fib-iter	4.24.scm	/^  (define (fib-iter a b count)$/;"	d
fib-iter	4.29.scm	/^  (define (fib-iter a b count)$/;"	d
first-exp	4.3.scm	/^  (define (first-exp seq) (car seq))$/;"	d
flatten-stream	4.72.scm	/^(define (flatten-stream stream)$/;"	d
flatten-stream	4.73.scm	/^(define (flatten-stream stream)$/;"	d
for-body	4.9.scm	/^(define (for-body exp) (caddr (cdddr exp)))$/;"	d
for-counter	4.9.scm	/^(define (for-counter exp) (cadr exp))$/;"	d
for-each	4.30.scm	/^(define (for-each proc items)$/;"	d
for-init	4.9.scm	/^(define (for-init exp) (caddr exp))$/;"	d
for-predicate	4.9.scm	/^(define (for-predicate exp) (cadddr exp))$/;"	d
for-update	4.9.scm	/^(define (for-update exp) (cadr (cdddr exp)))$/;"	d
for?	4.9.scm	/^(define (for? exp) (tagged-list? exp 'for))$/;"	d
force-it	4.29.scm	/^(define (force-it obj)$/;"	d
force-it	4.31.scm	/^(define (force-it obj)$/;"	d
frame-values	4.11.scm	/^(define (frame-values frame) (map cadr frame))$/;"	d
frame-variables	4.11.scm	/^(define (frame-variables frame) (map car frame))$/;"	d
get-val	4.31.scm	/^  (define (get-val var val)$/;"	d
id	4.27.scm	/^(define (id x)$/;"	d
id	4.29.scm	/^(define (id x)$/;"	d
if-alternative	4.3.scm	/^  (define (if-alternative exp)$/;"	d
if-consequent	4.3.scm	/^  (define (if-consequent exp) (caddr exp))$/;"	d
if-fail-fail	4.52.scm	/^(define (if-fail-fail exp) (caddr exp))$/;"	d
if-fail-fail	4.53.scm	/^(define (if-fail-fail exp) (caddr exp))$/;"	d
if-fail-state	4.52.scm	/^(define (if-fail-state exp) (cadr exp))$/;"	d
if-fail-state	4.53.scm	/^(define (if-fail-state exp) (cadr exp))$/;"	d
if-fail?	4.52.scm	/^(define (if-fail? exp)$/;"	d
if-fail?	4.53.scm	/^(define (if-fail? exp)$/;"	d
if-predicate	4.3.scm	/^  (define (if-predicate exp) (cadr exp))$/;"	d
install-eval-package	4.3.scm	/^(define (install-eval-package)$/;"	d
int	4.18.scm	/^  (define int$/;"	d
integral	4.18.scm	/^(define (integral delayed-integrand initial-value dt)$/;"	d
iter	4.7.scm	/^  (define (iter rest-parameters)$/;"	d
lambda-body	4.3.scm	/^  (define (lambda-body exp) (cddr exp))$/;"	d
lambda-parameters	4.3.scm	/^  (define (lambda-parameters exp) (cadr exp))$/;"	d
last-exp?	4.3.scm	/^  (define (last-exp? seq) (null? (cdr seq)))$/;"	d
let*->nested-lets	4.7.scm	/^(define (let*->nested-lets exp)$/;"	d
let*?	4.7.scm	/^(define (let*? exp) (tagged-list? exp 'let*))$/;"	d
let->combination	4.22.scm	/^(define (let->combination exp)$/;"	d
let->combination	4.6.scm	/^(define (let->combination exp)$/;"	d
let->combination	4.7.scm	/^(define (let->combination exp)$/;"	d
let->combination	4.8.scm	/^(define (let->combination exp)$/;"	d
let-body	4.22.scm	/^(define (let-body clauses) (cdr clauses))$/;"	d
let-body	4.6.scm	/^(define (let-body clauses) (cdr clauses))$/;"	d
let-body	4.7.scm	/^(define (let-body clauses) (cdr clauses))$/;"	d
let-body	4.8.scm	/^(define (let-body clauses) (cdr clauses))$/;"	d
let-clause	4.22.scm	/^(define (let-clause exp) (cdr exp))$/;"	d
let-clause	4.6.scm	/^(define (let-clause exp) (cdr exp))$/;"	d
let-clause	4.7.scm	/^(define (let-clause exp) (cdr exp))$/;"	d
let-clause	4.8.scm	/^(define (let-clause exp) (cdr exp))$/;"	d
let-exp	4.22.scm	/^(define (let-exp clauses) (map cadr (car clauses)))$/;"	d
let-exp	4.6.scm	/^(define (let-exp clauses) (map cadr (car clauses)))$/;"	d
let-exp	4.7.scm	/^(define (let-exp clauses) (map cadr (car clauses)))$/;"	d
let-exp	4.8.scm	/^(define (let-exp clauses) (map cadr (car clauses)))$/;"	d
let-rest	4.8.scm	/^(define (let-rest clauses) (cdr clauses))$/;"	d
let-var	4.22.scm	/^(define (let-var clauses) (map car (car clauses)))$/;"	d
let-var	4.6.scm	/^(define (let-var clauses) (map car (car clauses)))$/;"	d
let-var	4.7.scm	/^(define (let-var clauses) (map car (car clauses)))$/;"	d
let-var	4.8.scm	/^(define (let-var clauses) (map car (car clauses)))$/;"	d
let-variable	4.16.scm	/^    (define (let-variable def) (list (cadr def) ''*unassigned*))$/;"	d
let?	4.22.scm	/^(define (let? exp) (tagged-list? exp 'let))$/;"	d
let?	4.6.scm	/^(define (let? exp) (tagged-list? exp 'let))$/;"	d
let?	4.7.scm	/^(define (let? exp) (tagged-list? exp 'let))$/;"	d
let?	4.8.scm	/^(define (let? exp) (tagged-list? exp 'let))$/;"	d
letrec->let	4.20.scm	/^(define (letrec->let exp)$/;"	d
letrec?	4.20.scm	/^(define (letrec? exp) (tagged-list? exp 'letrec))$/;"	d
list-of-user-delayed-args	4.31.scm	/^(define (list-of-user-delayed-args vars vals env)$/;"	d
list-of-values	4.1.scm	/^(define (list-of-values exps env)$/;"	d
lookup-variable-value	4.12.scm	/^(define (lookup-variable-value var env)$/;"	d
lookup-variable-value	4.16.scm	/^(define (lookup-variable-value var env)$/;"	d
loop	4.23.scm	/^  (define (loop first-proc rest-procs)$/;"	d
make-begin	4.3.scm	/^  (define (make-begin seq) (cons 'begin seq))$/;"	d
make-define	4.8.scm	/^(define (make-define parameters body)$/;"	d
make-frame	4.11.scm	/^(define (make-frame variables values)$/;"	d
make-if	4.3.scm	/^  (define (make-if predicate consequent alternative)$/;"	d
make-lambda	4.3.scm	/^  (define (make-lambda parameters body)$/;"	d
make-let	4.7.scm	/^(define (make-let parameters body)$/;"	d
make-procedure	4.16.scm	/^(define (make-procedure parameters body env)$/;"	d
make-quotation-list	4.33.scm	/^(define (make-quotation-list lis)$/;"	d
maybe-extend	4.45.scm	/^  (define (maybe-extend noun-phrase)$/;"	d
maybe-extend	4.45.scm	/^  (define (maybe-extend verb-phrase)$/;"	d
maybe-extend	4.48.scm	/^  (define (maybe-extend adverb)$/;"	d
maybe-extend	4.48.scm	/^  (define (maybe-extend noun-phrase)$/;"	d
maybe-extend	4.48.scm	/^  (define (maybe-extend sentence)$/;"	d
maybe-extend	4.48.scm	/^  (define (maybe-extend verb-phrase)$/;"	d
maybe-extend	4.49.scm	/^  (define (maybe-extend noun-phrase)$/;"	d
maybe-extend	4.49.scm	/^  (define (maybe-extend verb-phrase)$/;"	d
maybe-extend	4.50.scm	/^  (define (maybe-extend noun-phrase)$/;"	d
maybe-extend	4.50.scm	/^  (define (maybe-extend verb-phrase)$/;"	d
merge-frames	4.76.scm	/^(define (merge-frames f1 f2)$/;"	d
multiple-dwelling	4.38.scm	/^(define (multiple-dwelling)$/;"	d
multiple-dwelling	4.39.scm	/^(define (multiple-dwelling)$/;"	d
multiple-dwelling	4.40.scm	/^(define (multiple-dwelling)$/;"	d
multiple-dwelling-filter	4.41.scm	/^(define (multiple-dwelling-filter items)$/;"	d
nouns	4.45.scm	/^(define nouns '(noun student professor cat class))$/;"	d
nouns	4.48.scm	/^(define nouns '(noun student professor cat class))$/;"	d
nouns	4.49.scm	/^(define nouns '(noun student professor cat class))$/;"	d
nouns	4.50.scm	/^(define nouns '(noun student professor cat class))$/;"	d
odd?	4.21.scm	/^  (define (odd? n)$/;"	d
operands	4.10.scm	/^(define (operands exp)$/;"	d
operands	4.2.scm	/^(define (operands exp) (cddr exp))$/;"	d
operands-iter	4.10.scm	/^  (define (operands-iter ex)$/;"	d
operator	4.10.scm	/^(define (operator exp) (last exp))$/;"	d
operator	4.2.scm	/^(define (operator exp) (cadr exp))$/;"	d
or-clauses	4.4.scm	/^(define (or-clauses exp) (cdr exp))$/;"	d
or?	4.4.scm	/^(define (or? exp) (tagged-list? exp 'or))$/;"	d
p	4.30.scm	/^  (define (p e)$/;"	d
p	4.31.scm	/^  (define (p (e lazy))$/;"	d
p	4.31.scm	/^  (define (p e)$/;"	d
p1	4.30.scm	/^(define (p1 x)$/;"	d
p2	4.30.scm	/^(define (p2 x)$/;"	d
p2	4.31.scm	/^(define (p2 x)$/;"	d
parse	4.45.scm	/^(define (parse input)$/;"	d
parse	4.48.scm	/^(define (parse input)$/;"	d
parse	4.49.scm	/^(define (parse input)$/;"	d
parse	4.50.scm	/^(define (parse input)$/;"	d
parse-adverb	4.48.scm	/^(define (parse-adverb)$/;"	d
parse-noun-phrase	4.45.scm	/^(define (parse-noun-phrase)$/;"	d
parse-noun-phrase	4.47.scm	/^(define (parse-noun-phrase)$/;"	d
parse-noun-phrase	4.48.scm	/^(define (parse-noun-phrase)$/;"	d
parse-noun-phrase	4.49.scm	/^(define (parse-noun-phrase)$/;"	d
parse-noun-phrase	4.50.scm	/^(define (parse-noun-phrase)$/;"	d
parse-prepositional-phrase	4.45.scm	/^(define (parse-prepositional-phrase)$/;"	d
parse-prepositional-phrase	4.48.scm	/^(define (parse-prepositional-phrase)$/;"	d
parse-prepositional-phrase	4.49.scm	/^(define (parse-prepositional-phrase)$/;"	d
parse-prepositional-phrase	4.50.scm	/^(define (parse-prepositional-phrase)$/;"	d
parse-sentence	4.45.scm	/^(define (parse-sentence)$/;"	d
parse-sentence	4.48.scm	/^(define (parse-sentence)$/;"	d
parse-sentence	4.49.scm	/^(define (parse-sentence)$/;"	d
parse-sentence	4.50.scm	/^(define (parse-sentence)$/;"	d
parse-sentences	4.48.scm	/^(define (parse-sentences)$/;"	d
parse-simple-noun-phrase	4.45.scm	/^(define (parse-simple-noun-phrase)$/;"	d
parse-simple-noun-phrase	4.48.scm	/^(define (parse-simple-noun-phrase)$/;"	d
parse-simple-noun-phrase	4.49.scm	/^(define (parse-simple-noun-phrase)$/;"	d
parse-simple-noun-phrase	4.50.scm	/^(define (parse-simple-noun-phrase)$/;"	d
parse-verb-phrase	4.45.scm	/^(define (parse-verb-phrase)$/;"	d
parse-verb-phrase	4.47.scm	/^(define (parse-verb-phrase)$/;"	d
parse-verb-phrase	4.48.scm	/^(define (parse-verb-phrase)$/;"	d
parse-verb-phrase	4.49.scm	/^(define (parse-verb-phrase)$/;"	d
parse-verb-phrase	4.50.scm	/^(define (parse-verb-phrase)$/;"	d
parse-word	4.45.scm	/^(define (parse-word word-list)$/;"	d
parse-word	4.48.scm	/^(define (parse-word word-list)$/;"	d
parse-word	4.49.scm	/^(define (parse-word word-list)$/;"	d
parse-word	4.50.scm	/^(define (parse-word word-list)$/;"	d
permanent-assignment?	4.51.scm	/^(define (permanent-assignment? exp)$/;"	d
permanent-assignment?	4.53.scm	/^(define (permanent-assignment? exp)$/;"	d
prepositions	4.45.scm	/^(define prepositions '(prep for to in by with))$/;"	d
prepositions	4.48.scm	/^(define prepositions '(prep for to in by with))$/;"	d
prepositions	4.49.scm	/^(define prepositions '(prep for to in by with))$/;"	d
prepositions	4.50.scm	/^(define prepositions '(prep for to in by with))$/;"	d
prime-sum-pair	4.53.scm	/^(define (prime-sum-pair list1 list2)$/;"	d
primitive-procedures	4.50.scm	/^(define primitive-procedures$/;"	d
queens	4.44.scm	/^(define (queens board-size)$/;"	d
query-driver-loop	4.77.scm	/^(define (query-driver-loop)$/;"	d
ramb?	4.50.scm	/^(define (ramb? exp) (tagged-list? exp 'ramb))$/;"	d
remove-binding-from-frame!	4.13.scm	/^(define (remove-binding-from-frame! var val frame)$/;"	d
require	4.50.scm	/^(define (require p)$/;"	d
require	4.51.scm	/^(define (require p)$/;"	d
require	4.52.scm	/^(define (require p)$/;"	d
require	4.53.scm	/^(define (require p)$/;"	d
require-predicate	4.54.scm	/^(define (require-predicate exp) (cadr exp))$/;"	d
require?	4.54.scm	/^(define (require? exp) (tagged-list? exp 'require))$/;"	d
rest-exps	4.3.scm	/^  (define (rest-exps seq) (cdr seq))$/;"	d
run-forever	4.15.scm	/^(define (run-forever) (run-forever))$/;"	d
scan	4.12.scm	/^    (define (scan vars vals)$/;"	d
scan	4.13.scm	/^    (define (scan vars vals)$/;"	d
scan	4.16.scm	/^    (define (scan vars vals)$/;"	d
scan-frame	4.12.scm	/^(define (scan-frame var frame proc)$/;"	d
scan-out-defines	4.16.scm	/^(define (scan-out-defines body)$/;"	d
sequence->exp	4.3.scm	/^  (define (sequence->exp seq)$/;"	d
sequentially	4.23.scm	/^  (define (sequentially proc1 proc2)$/;"	d
set-body	4.16.scm	/^    (define (set-body def) (list 'set! (cadr def) (caddr def)))$/;"	d
set-variable-value!	4.12.scm	/^(define (set-variable-value! var val env)$/;"	d
simple-flatten	4.74.scm	/^(define (simple-flatten stream)$/;"	d
simple-query	4.71.scm	/^(define (simple-query query-pattern frame-stream)$/;"	d
simple-stream-flatmap	4.74.scm	/^(define (simple-stream-flatmap proc s)$/;"	d
solve	4.18.scm	/^(define (solve f y0 dt)$/;"	d
square	4.29.scm	/^(define (square x)$/;"	d
stream-flatmap	4.72.scm	/^(define (stream-flatmap proc s)$/;"	d
tagged-list?	4.10.scm	/^(define (tagged-list? exp tag)$/;"	d
test-liar	4.42.scm	/^(define (test-liar)$/;"	d
text-of-quotation	4.3.scm	/^  (define (text-of-quotation exp env) (cadr exp))$/;"	d
text-of-quotation	4.33.scm	/^(define (text-of-quotation exp env)$/;"	d
thunk-memo?	4.31.scm	/^(define (thunk-memo? obj)$/;"	d
try	4.15.scm	/^(define (try p)$/;"	d
try-next	4.50.scm	/^      (define (try-next choices)$/;"	d
u	4.16.scm	/^     (define u (+ 1 1))$/;"	d
u	4.16.scm	/^    (define u (+ 1 1))$/;"	d
u	4.17.scm	/^    (define u <e1>)$/;"	d
unbind-variable!	4.13.scm	/^(define (unbind-variable! var env)$/;"	d
unbind?	4.13.scm	/^(define (unbind? exp)$/;"	d
unbinding-variable	4.13.scm	/^(define (unbinding-variable exp) (cadr exp))$/;"	d
unique-query	4.75.scm	/^(define (unique-query exps) (car exps))$/;"	d
uniquely-asserted	4.75.scm	/^(define (uniquely-asserted operands frame-stream)$/;"	d
unless	4.25.scm	/^(define (unless condition usual-value exceptional-value)$/;"	d
unless->if	4.26.scm	/^(define (unless->if exp)$/;"	d
unless-condition	4.26.scm	/^(define (unless-condition exp) (cadr exp))$/;"	d
unless-exceptional	4.26.scm	/^(define (unless-exceptional exp) (cadddr exp))$/;"	d
unless-usual	4.26.scm	/^(define (unless-usual exp) (caddr exp))$/;"	d
unless?	4.26.scm	/^(define (unless? exp) (tagged-list? exp 'unless))$/;"	d
until-body	4.9.scm	/^(define (until-body exp) (caddr exp))$/;"	d
until-predicate	4.9.scm	/^(define (until-predicate exp) (cadr exp))$/;"	d
until?	4.9.scm	/^(define (until? exp) (tagged-list? exp 'until))$/;"	d
v	4.16.scm	/^     (define v (+ 2 2))$/;"	d
v	4.16.scm	/^    (define v (+ 2 2))$/;"	d
v	4.17.scm	/^    (define v <e2>)$/;"	d
verbs	4.45.scm	/^(define verbs '(verb studies lectures eats sleeps))$/;"	d
verbs	4.48.scm	/^(define verbs '(verb studies lectures eats sleeps))$/;"	d
verbs	4.49.scm	/^(define verbs '(verb studies lectures eats sleeps))$/;"	d
verbs	4.50.scm	/^(define verbs '(verb studies lectures eats sleeps))$/;"	d
w	4.27.scm	/^(define w (id (id 10)))$/;"	d
while-body	4.9.scm	/^(define (while-body exp) (caddr exp))$/;"	d
while-predicate	4.9.scm	/^(define (while-predicate exp) (cadr exp))$/;"	d
while?	4.9.scm	/^(define (while? exp) (tagged-list? exp 'while))$/;"	d
y	4.18.scm	/^  (define y (integral (delay dy) y0 dt))$/;"	d
