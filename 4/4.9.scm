(load "../metacircular.scm")
;; (do-while <body> <pred>)
(define (do-while? exp) (tagged-list? exp 'do-while))
(define (do-while-body exp) (cadr exp))
(define (do-while-predicate exp) (caddr exp))
(define (expand-do-while exp)
  (let ((predicate (do-while-predicate exp))
	(body (do-while-body exp)))
    (make-begin (list body (make-if predicate
				    (list 'do-while predicate body)
				    'true)))))

;; (for <counter> <init> <pred> <update> <body>)
(define (for? exp) (tagged-list? exp 'for))
(define (for-counter exp) (cadr exp))
(define (for-init exp) (caddr exp))
(define (for-predicate exp) (cadddr exp))
(define (for-update exp) (cadr (cdddr exp)))
(define (for-body exp) (caddr (cdddr exp)))
(define (expand-for exp)
  (let ((counter (for-counter exp))
	(init (for-init exp))
	(predicate (for-predicate exp))
	(update (for-update exp))
	(body (for-body exp)))
    (make-begin (list (list 'define counter init)
		      (list 'while predicate (make-begin (list body update)))))))
;; (while <pred> <body>)
(define (while? exp) (tagged-list? exp 'while))
(define (while-predicate exp) (cadr exp))
(define (while-body exp) (caddr exp))
(define (expand-while exp)
  (let ((predicate (while-predicate exp))
	(body (while-body exp)))
    (make-if predicate
	     (make-begin (list body (list 'while predicate body)))
	     'true)))
;; (until <pred> <body>)
(define (until? exp) (tagged-list? exp 'until))
(define (until-predicate exp) (cadr exp))
(define (until-body exp) (caddr exp))
(define (expand-until exp)
  (let ((predicate (until-predicate exp))
	(body (until-body exp)))
    (make-if (list 'not predicate)
	     (make-begin (list body (list 'until predicate body)))
	     'true)))

(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
    ((variable? exp) (lookup-variable-value exp env))
    ((quoted? exp) (text-of-quotation exp))
    ((assignment? exp) (eval-assignment exp env))
    ((definition? exp) (eval-definition exp env))
    ((if? exp) (eval-if exp env))
    ((lambda? exp)
     (make-procedure (lambda-parameters exp)
		     (lambda-body exp)
		     env))
    ((begin? exp)
     (eval-sequence (begin-actions exp) env))
    ((cond? exp) (eval (cond->if exp) env))
    ((let? exp) (eval (let->combination exp) env))
    ((do-while? exp) (eval (expand-do-while exp) env))
    ((for? exp) (eval (expand-for exp) env))
    ((while? exp) (eval (expand-while exp) env))
    ((until? exp) (eval (expand-until exp) env))
    ((application? exp)
     (apply (eval (operator exp) env)
	    (list-of-values (operands exp) env)))
    (else
      (error "Unknown expression type -- EVAL" exp))))

;;(define i 0)
;;(do-while (begin (set! i (+ i 1)) (print i)) (< i 10))
;;(for i 0 (< i 10) (set! i (+ i 1)) (print i))
;;(while (< i 10) (begin (set! i (+ i 1)) (print i)))
;;(until (> i 10) (begin (set! i (+ i 1)) (print i)))

(driver-loop)

