(define A (make-center-percent 10.0 0.1))
(define B (make-center-percent 5.0 0.2))
(center (par1 A B))
(center (par2 A B))
(percent (par1 A B))
(percent (par2 A B))

;; par1
;; 3.3333592593053503
;; 0.4333310000139818
;; par2
;; 3.333332592591276
;; 0.1666667333334558
;; 両者の結果は異なる

(define (par1 r1 r2)
  (div-interval (mul-interval r1 r2)
		(add-interval r1 r2)))
(define (par2 r1 r2)
  (let ((one (make-interval 1 1)))
    (div-interval one
		  (add-interval (div-interval one r1)
				(div-interval one r2)))))
(define (make-center-percent c p)
  (let ((width (/ (* c p) 100)))
    (make-center-width c width)))
(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))
(define (percent i)
  (* (/ (width i) (center i)) 100))
(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2))
(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2))
(define (mul-interval x y)
  (let ((lx (lower-bound x))
	(ly (lower-bound y))
	(ux (upper-bound x))
	(uy (upper-bound y)))
    (cond ((and (and (> lx 0) (> ux 0)) (and (> ly 0) (> uy 0)))
	   (make-interval (* lx ly) (* ux uy)))
	  ((and (and (> lx 0) (> ux 0)) (and (< ly 0) (> uy 0)))
	   (make-interval (* lx ly) (* ux uy)))
	  ((and (and (> lx 0) (> ux 0)) (and (< ly 0) (< uy 0)))
	   (make-interval (* ux ly) (* lx uy)))
	  ((and (and (< lx 0) (> ux 0)) (and (> ly 0) (> uy 0)))
	   (make-interval (* lx ly) (* ux uy)))
	  ((and (and (< lx 0) (> ux 0)) (and (< ly 0) (> uy 0)))
	   (make-interval (min (* lx uy) (* ux ly)) (max (* lx ly) (* ux uy))))
	  ((and (and (< lx 0) (> ux 0)) (and (< ly 0) (< uy 0)))
	   (make-interval (* ux ly) (* lx ly)))
	  ((and (and (< lx 0) (< ux 0)) (and (> ly 0) (> uy 0)))
	   (make-interval (* lx uy) (* ux ly)))
	  ((and (and (< lx 0) (< ux 0)) (and (< ly 0) (> uy 0)))
	   (make-interval (* lx uy) (* lx ly)))
	  ((and (and (< lx 0) (< ux 0)) (and (< ly 0) (< uy 0)))
	   (make-interval (* ux uy) (* lx ly))))))
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
		 (+ (upper-bound x) (upper-bound y))))
(define (sub-interval x y)
  (make-interval (- (lower-bound x) (upper-bound y))
		 (- (upper-bound x) (lower-bound y))))
(define (div-interval x y)
  (if (or (= (upper-bound y) 0) (= (lower-bound y) 0))
      (error "Argument upper-bound or lower-bound is 0 ---CONS" y)
      (mul-interval x
		    (make-interval (/ 1.0 (upper-bound y))
				   (/ 1.0 (lower-bound y))))))
(define (make-interval a b) (cons a b))
(define (lower-bound x) (car x))
(define (upper-bound x) (cdr x))
