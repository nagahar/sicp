(define (mul-interval x y)
  (let ((lx (lower-bound x))
	(ly (lower-bound y))
	(ux (upper-bound x))
	(uy (upper-bound y)))
    (cond ((and (and (> lx 0) (> ux 0)) (and (> ly 0) (> uy 0)))
	   (make-interval (* lx ly) (* ux uy)))
	  ((and (and (> lx 0) (> ux 0)) (and (< ly 0) (> uy 0)))
	   (make-interval (* ux ly) (* ux uy)))
	  ((and (and (> lx 0) (> ux 0)) (and (< ly 0) (< uy 0)))
	   (make-interval (* ux ly) (* lx uy)))
	  ((and (and (< lx 0) (> ux 0)) (and (> ly 0) (> uy 0)))
	   (make-interval (* lx ly) (* ux uy)))
	  ((and (and (< lx 0) (> ux 0)) (and (< ly 0) (> uy 0)))
	   (make-interval (min (* lx uy) (* ux ly)) (max (* lx ly) (* ux uy))))
	  ((and (and (< lx 0) (> ux 0)) (and (< ly 0) (< uy 0)))
	   (make-interval (* ux ly) (* lx ly)))
	  ((and (and (< lx 0) (< ux 0)) (and (> ly 0) (> uy 0)))
	   (make-interval (* lx uy) (* ux ly)))
	  ((and (and (< lx 0) (< ux 0)) (and (< ly 0) (> uy 0)))
	   (make-interval (* lx uy) (* lx ly)))
	  ((and (and (< lx 0) (< ux 0)) (and (< ly 0) (< uy 0)))
	   (make-interval (* ux uy) (* lx ly))))))
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
		 (+ (upper-bound x) (upper-bound y))))
(define (sub-interval x y)
  (make-interval (- (lower-bound x) (upper-bound y))
		 (- (upper-bound x) (lower-bound y))))
(define (div-interval x y)
  (if (or (= (upper-bound y) 0) (= (lower-bound y) 0))
      (error "Argument upper-bound or lower-bound is 0 ---CONS" y)
      (mul-interval x
		    (make-interval (/ 1.0 (upper-bound y))
				   (/ 1.0 (lower-bound y))))))
(define (make-interval a b) (cons a b))
(define (lower-bound x) (car x))
(define (upper-bound x) (cdr x))
