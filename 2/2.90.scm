(define (install-sparse-term-package)
  ;; internal procedures
  (define (adjoin-term term termlist)
    (if (=zero? (coeff term))
	termlist
	(cons term termlist)))
  (define (first-term termlist) (car termlist))
  (define (add-terms L1 L2)
    (cond ((empty-termlist? L1) L2)
	  ((empty-termlist? L2) L1)
	  (else
	   (let ((t1 (first-term L1)) (t2 (first-term L2)))
	     (cond ((> (order t1) (order t2))
		    (adjoin-term
		     t1 (add-terms (rest-terms L1) L2)))
		   ((< (order t1) (order t2))
		    (adjoin-term
		     t2 (add-terms L1 (rest-terms L2))))
		   (else
		    (adjoin-term
		     (make-term (order t1)
				(add (coeff t1) (coeff t2)))
		     (add-terms (rest-terms L1)
				(rest-terms L2)))))))))
  (define (mul-terms L1 L2)
    (if (empty-termlist? L1)
	(the-empty-termlist)
	(add-terms (mul-term-by-all-terms (first-term L1) L2)
		   (mul-terms (rest-terms L1) L2))))
  (define (mul-term-by-all-terms t1 L)
    (if (empty-termlist? L)
	(the-empty-termlist)
	(let ((t2 (first-term L)))
	  (adjoin-term
	   (make-term (+ (order t1) (order t2))
		      (mul (coeff t1) (coeff t2)))
	   (mul-term-by-all-terms t1 (rest-terms L))))))
  (define (inv-terms L)
    (if (empty-termlist? L)
	(the-empty-termlist)
	(let ((t (first-term L)))
	  (adjoin-term
	   (make-term (order t)
		      (inv (coeff t)))
	   (inv-terms (rest-terms L))))))
  (define (rest-terms termlist) (cdr termlist))
  (define (empty-termlist? termlist) (null? termlist))
  (define (zero-term? term)
    (or (empty-termlist? term)
	(and (=zero? (coeff (first-term term)))
	     (zero-term? (rest-terms term)))))
  ;; interface to rest of the system
  (define (tag p) (attach-tag 'sparse-polynomial p))
  (put 'add-terms '(sparse-polynomial sparse-polynomial)
       (lambda (L1 L2) (tag (add-terms L1 L2))))
  (put 'add-terms '(sparse-polynomial dense-polynomial)
       (lambda (L1 L2) (tag (add-terms L1 (dense->sparse L2)))))
  (put 'mul-terms '(sparse-polynomial sparse-polynomial)
       (lambda (L1 L2) (tag (mul-terms L1 L2))))
  (put 'mul-terms '(sparse-polynomial dense-polynomial)
       (lambda (L1 L2) (tag (mul-terms L1 (dense->sparse L2)))))
  (put 'inv-terms '(sparse-polynomial)
       (lambda (L) (tag (inv-terms L))))
  (put 'make 'sparse-polynomial
       (lambda (termlist) (tag termlist)))
  (put 'first-term '(sparse-polynomial)
       (lambda (termlist) (tag (first-term termlist))))
  (put 'rest-terms '(sparse-polynomial)
       (lambda (termlist) (tag (rest-terms termlist))))
  (put 'zero-term? '(sparse-polynomial)
       (lambda (termlist) (zero-term? termlist)))
  (put 'make-from-sparse 'sparse-term
       (lambda (sparse-term-list) (tag sparse-term-list)))
  (put 'make-form-dense 'sparse-term
       (lambda (dense-term-list) (tag (dense->sparse dense-term-list))))
  'done)
(define (make-sparse-term ts)
  ((get 'make-from-sparse 'sparse-term) ts))

(define (install-dense-term-package)
  ;; internal procedures
  (define (adjoin-term term termlist)
    (let ((loop (+ (- (order term) (length termlist)) 1)))
      (if (= loop 0)
	  termlist
	  (cons (coeff term)
		(adjoin-term (make-term (- (order term) 1) 0)
			     termlist)))))
  (define (first-term termlist)
    (make-term (- (length termlist) 1) (car termlist)))
  (define (add-terms L1 L2)
    (cond ((empty-termlist? L1) L2)
	  ((empty-termlist? L2) L1)
	  (else
	   (let ((t1 (first-term L1)) (t2 (first-term L2)))
	     (cond ((> (order t1) (order t2))
		    (adjoin-term
		     t1 (add-terms (rest-terms L1) L2)))
		   ((< (order t1) (order t2))
		    (adjoin-term
		     t2 (add-terms L1 (rest-terms L2))))
		   (else
		    (adjoin-term
		     (make-term (order t1)
				(add (coeff t1) (coeff t2)))
		     (add-terms (rest-terms L1)
				(rest-terms L2)))))))))
  (define (mul-terms L1 L2)
    (if (empty-termlist? L1)
	(the-empty-termlist)
	(add-terms (mul-term-by-all-terms (first-term L1) L2)
		   (mul-terms (rest-terms L1) L2))))
  (define (mul-term-by-all-terms t1 L)
    (if (empty-termlist? L)
	(the-empty-termlist)
	(let ((t2 (first-term L)))
	  (adjoin-term
	   (make-term (+ (order t1) (order t2))
		      (mul (coeff t1) (coeff t2)))
	   (mul-term-by-all-terms t1 (rest-terms L))))))
  (define (inv-terms L)
    (if (empty-termlist? L)
	(the-empty-termlist)
	(let ((t (first-term L)))
	  (adjoin-term
	   (make-term (order t)
		      (inv (coeff t)))
	   (inv-terms (rest-terms L))))))
  (define (rest-terms termlist) (cdr termlist))
  (define (empty-termlist? termlist) (null? termlist))
  (define (zero-term? term)
    (or (empty-termlist? term)
	(and (=zero? (coeff (first-term term)))
	     (zero-term? (rest-terms term)))))
  ;; interface to rest of the system
  (define (tag p) (attach-tag 'dense-polynomial p))
  (put 'add-terms '(dense-polynomial dense-polynomial)
       (lambda (L1 L2) (tag (add-terms L1 L2))))
  (put 'add-terms '(dense-polynomial sparse-polynomial)
       (lambda (L1 L2) (tag (add-terms L1 (sparse->dense L2)))))
  (put 'mul-terms '(dense-polynomial dense-polynomial)
       (lambda (L1 L2) (tag (mul-terms L1 L2))))
  (put 'mul-terms '(dense-polynomial sparse-polynomial)
       (lambda (L1 L2) (tag (mul-terms L1 (sparse->dense L2)))))
  (put 'inv-terms '(dense-polynomial)
       (lambda (L) (tag (inv-terms L))))
  (put 'make 'dense-polynomial
       (lambda (termlist) (tag termlist)))
  (put 'first-term '(dense-polynomial)
       (lambda (termlist) (tag (first-term termlist))))
  (put 'rest-terms '(dense-polynomial)
       (lambda (termlist) (tag (rest-terms termlist))))
  (put 'zero-term? '(dense-polynomial)
       (lambda (termlist) (zero-term? termlist)))
  (put 'make-from-sparse 'dense-term
       (lambda (sparse-term-list) (tag (sparse->dense sparse-term-list))))
  (put 'make-from-dense 'dense-term
       (lambda (dense-term-list) (tag dense-term-list)))
  'done)
(define (make-dense-term ts)
  ((get 'make-from-dense 'dense-term) ts))

(define (first-term termlist) (apply-generic 'first-term termlist))
(define (rest-terms termlist) (apply-generic 'rest-terms termlist))
(define (empty-termlist? termlist) (apply-generic 'empty-termlist? termlist))
(define (add-terms L1 L2) (apply-generic 'add-terms L1 L2))
(define (mul-terms L1 L2) (apply-generic 'mul-terms L1 L2))
(define (inv-terms termlist) (apply-generic 'inv-terms termlist))
(define (zero-term? termlist) (apply-generic 'zero-term? termlist))
(define (the-empty-termlist) '())
(define (make-term order coeff) (list order coeff))
(define (order term) (car term))
(define (coeff term) (cadr term))

(define (dense->sparse ts)
  (define (iter rs i ts)
    (if (null? ts)
        rs
        (iter (cons (list i (car ts)) rs) (+ i 1) (cdr ts))))
  (iter '() 0 (reverse ts)))
(define (sparse->dense ts)
  (define (iter rs i ts)
    (if (null? ts)
        rs
        (let ((t (car ts)))
          (let ((j (car t)))
            (if (= i j)
                (iter (cons (cadr t) rs) (+ i 1) (cdr ts))
                (iter (cons (make-scheme-number 0) rs) (+ i 1) ts))))))
  (iter '() 0 (reverse ts)))

(define (install-polynomial-package)
  ;; internal procedures
  ;; representation of poly
  (define (make-poly variable termlist)
    (cons variable termlist))
  (define (variable p) (car p))
  (define (term-list p) (cdr p))
  ;; representation of terms and term lists
  (define (add-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
	(make-poly (variable p1)
		   (add-terms (term-list p1)
			      (term-list p2)))
	(error "Polys not in same var -- ADD-POLY"
	       (list p1 p2))))
  (define (mul-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
	(make-poly (variable p1)
		   (mul-terms (term-list p1)
			      (term-list p2)))
	(error "Polys not in same var -- MUL-POLY"
	       (list p1 p2))))
  (define (inv-poly p)
    (make-poly (variable p) (inv-terms (term-list p))))
  ;; interface to rest of the system
  (define (tag p) (attach-tag 'polynomial p))
  (put 'add '(polynomial polynomial) 
       (lambda (p1 p2) (tag (add-poly p1 p2))))
  (put 'mul '(polynomial polynomial) 
       (lambda (p1 p2) (tag (mul-poly p1 p2))))
  (put 'sub '(polynomial polynomial)
       (lambda (p1 p2) (tag (add-poly p1 (inv-poly p2)))))
  (put 'make 'polynomial
       (lambda (var terms) (tag (make-poly var terms))))
  (put '=zero? '(polynomial)
       (lambda (p) (zero-term? (term-list p))))
  (put 'inv '(polynomial)
       (lambda (p) (tag (inv-poly p))))
  'done)
(define (make-polynomial var terms)
  ((get 'make 'polynomial) var terms))

(install-sparse-term-package)
(install-dense-term-package)
(install-polynomial-package)

(define pol1 (make-polynomial 'x (make-dense-term '(1 0))))
(define pol2 (make-polynomial 'x (make-sparse-term '((1 2) (0 1)))))
(define pol3 (make-polynomial 'x (make-sparse-term '((0 0)))))
(=zero? pol1)
(=zero? pol2)
(=zero? pol3)
(add pol1 pol2)
(add pol2 pol1)
(mul pol1 pol2)
(sub pol2 pol1)

