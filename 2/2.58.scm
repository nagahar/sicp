(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num)
  (and (number? exp) (= exp num)))
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
           (make-product (multiplier exp)
                         (deriv (multiplicand exp) var))
           (make-product (deriv (multiplier exp) var)
                         (multiplicand exp))))
	((exponentiation? exp)
	 (let ((e (exponent exp))
	       (b (base exp)))
	   (make-product (make-product e (make-exponetiation b (make-sum e -1)))
			 (deriv b var))))
	(else
         (error "unknown expression type -- DERIV" exp))))

;a.
(define (sum? x)
  (and (pair? x) (eq? (cadr x) '+)))
(define (addend s) (car s))
(define (augend s) (caddr s))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list a1 '+ a2))))

(define (product? x)
  (and (pair? x) (eq? (cadr x) '*)))
(define (multiplier p) (car p))
(define (multiplicand p) (caddr p))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list m1 '* m2))))

(define (exponentiation? x)
  (and (pair? x) (eq? (cadr x) '**)))
(define (base e) (car e))
(define (exponent e) (caddr e))
(define (make-exponetiation x n)
  (cond ((=number? n 0) 1)
	((=number? n 1) x)
	((and (number? x) (number? n)) (expt x n))
	(else (list x '** n))))

;b.
;微分プログラムderivにおいて優先順位を考慮した評価を行う必要がある
;または、優先順位を考慮した構文木に分解してderivを適用する

(define (memq item x)
  (cond ((null? x) #f)
        ((eq? item (car x)) x)
        (else (memq item (cdr x)))))
(define (inv-memq item x)
  (cond ((null? x) #f)
        ((eq? item (car x)) ())
        (else (cons (car x) (inv-memq item (cdr x))))))
(define (flatten x)
  (if (= (length x) 1)
      (car x)
      x))
(define (sum? x)
  (and (pair? x) (not (eq? (memq '+ x) #f))))
(define (addend s) (flatten (inv-memq '+ s)))
(define (augend s) (flatten (cdr (memq '+ s))))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list a1 '+ a2))))

(define (product? x)
  (and (pair? x) (not (eq? (memq '* x) #f))))
(define (multiplier p) (flatten (inv-memq '* p)))
(define (multiplicand p) (flatten (cdr (memq '* p))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list m1 '* m2))))

(define (exponentiation? x)
  (and (pair? x) (not (eq? (memq '** x) #f))))
(define (base e) (flatten (inv-memq '** e)))
(define (exponent e) (flatten (cdr (memq '** p))))
(define (make-exponetiation x n)
  (cond ((=number? n 0) 1)
	((=number? n 1) x)
	((and (number? x) (number? n)) (expt x n))
	(else (list x '** n))))
